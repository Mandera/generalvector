
name: UnitTest and Publish

on:
  push:
    branches: master

jobs:

#  unittest:
#    runs-on: ${{ matrix.os }}
#    strategy:
#      matrix:
#        python-version: [3.7]
#        os: [ubuntu-latest]
##        python-version: [3.7, 3.8]
##        os: [ubuntu-latest, windows-latest, macos-latest]
#
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Set up Python ${{ matrix.python-version }}
#        uses: actions/setup-python@v2
#        with:
#          python-version: ${{ matrix.python-version }}
#
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install .
#
#      - name: Run unittests
#        run: |
#          python -m unittest discover


  publisher:
#    needs: unittest
    runs-on: ubuntu-latest
    steps:
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: Install latest release to get version
      run: |
        python -m pip install --upgrade pip
        pip install ${{ github.event.repository.name }}

        X=($(echo $(pip show ${{ github.event.repository.name }} | grep Version) | tr ': ' '\n'))
        echo "OLD_VERSION=${X[1]}" >> $GITHUB_ENV

        X=($(echo $(pip show ${{ github.event.repository.name }} | grep Required-by) | tr ': ' '\n'))
        echo "DEPENDENT_PACKAGES=${X[1]}" >> $GITHUB_ENV

    - name: Checkout
      uses: actions/checkout@v2

    - name: Test
      run: |
        echo "NEW_VERSION=$(python setup.py --version)" >> $GITHUB_ENV

    - name: Print info
      run: |
        echo Old version:
        echo ${{ env.OLD_VERSION }}

        echo New version:
        echo ${{ env.NEW_VERSION }}

        echo "Packages depending on this one:"
        echo ${{ env.DEPENDENT_PACKAGES }}

        PACKAGE_ARRAY=($(echo {{ env.DEPENDENT_PACKAGES }} | tr ',' '\n'))
        for x in ${PACKAGE_ARRAY[@]}; do echo $x; done

#    - name: Publish
#      if: ${{ env.NEW_VERSION }} != ${{ env.OLD_VERSION }}
#      env:
#        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
#        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
#      run: |
#        pip install twine
#        python setup.py sdist bdist_wheel
#        twine upload dist/*




## Direct split
#X=($(echo VALUE | tr ', ' '\n')); NAME=${X[1]}
#
## Create array of strings
#NAME=($(echo VALUE | tr ',' '\n'))
#
## Iterate array
#for x in ${NAME[@]}; do echo $x; done
#
#
#
## Assign to github variable `${{ env.NAME }}`
#echo "NAME=$(VALUE)" >> $GITHUB_ENV


































